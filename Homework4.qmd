---
title: "Homework 4 - Hodge Podge"
author: "Jason M. Pattison, ST 588-651 Summer 1 2024"
format: html
editor: visual
---

## Homework 4 Assignment Objectives

Task 1 for this homework assignment is practice with answering the types of questions that will be asked on the next exam.

Task 2 of the assignment involves writing R functions manually create functions that generate the Root Mean Square Error (RMSE) and Mean Absolute Deviation (MAE) given a set of response values.

Task 3 of the assignment focuses on querying an API and writing a function that queries the API and

### Task 1: Conceptual Questions

1.  What is the purpose of the `lapply()` function? What is the equivalent `purrr` function?

    > The purpose `lapply()` is to apply a function to all variables in a data frame. `lapply`treats the variables in data frames as a list, and applies a called function to all objects in the list. The equivalent purrr function to`lapply()`is`map()`.

2.  Suppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use `lapply()` to run the code cor(numeric_matrix, method = "kendall") on each element of the list. Write code to do this below! (Iâ€™m really trying to ask you how you specify method = "kendall" when calling `lapply()`)

    > lapply(my_list, cor(numeric_matrix, method = "kendall"))

3.  What are two advantages of using purrr functions instead of the BaseR apply family?

    > `map()` is more consistent and has additional helper funcitons for use in analysis

4.  What is a side-effect function?

    > A side-effect funciton is one where the state of the data is changed while returning a value. Some examples are `print()` and `plot()` where the function takes the data and creates the different outputs.

5.  Why can you name a variable sd in a function and not cause any issues with the sd function?

    > The sd() function is global throughout R (via R packages). When use inside of a function, `sd` is a temporary variable that is local to the funciton it is in. Once the functioncode is finished running, the variable sd does not exist.

### Task 2: Writing R Functions

Before we write any code, we want to ensure we establish a library for the functions to operate from so the program renders to Quarto properly.

```{r establish libraries}

library(tidyverse)

```

#### 2.1. Write `getRMSE`

Step 1 of task 2 is to write a basic function called `getRMSE()` that takes in a vector of responses, a vector of predictions, and outputs the RMSE.

```{r write the getRMSE function}

# name the function "getRMSE", define "x" as our response
# values and "y" as our predicted values. 

getRMSE <- function(x, y) {


# generate the loop required to subtract each predicted 
# value from the corresponding response value.

# subtract the predicted values from the observed values, square the difference, 
# sum the values, establish the mean of the sum, then take
# the square root of the mean. 

# Note: The order of which variable is subtracted from which
# doesn't matter due to squaring the difference for each
# iteration of the loop. 
  
  for (i in x) {  
  diff_sq <- ((x - y)**2)
  } 

  
# take the square root of the mean of the diff_sq, define
# it as "RMSE"
  
  RMSE <- sqrt(mean(diff_sq))

    
# output the result
  list("RMSE" = RMSE)
}


# quickly test the function using 10 through 100 by ten as
# the response and the mean as the predicted value for each
# response to ensure there are no error codes

x_test <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
y_test <- c(55, 55, 55, 55, 55, 55, 55, 55, 55, 55)

getRMSE(x_test, y_test)

```

The generic run of our function did not produce an error code, so we're ready to move on to step 2.

#### 2.2. Test `getRMSE`

Step 2 of task 2 is to generate response and predicted values for x, then process those values through our `getRMSE` function.

First we will run the code provided in the homework assignment to create vectors of response values and predicted values. We will title these vectors `resp` and `pred` respectively.

```{r create response and predicted values}

set.seed(10)
n <- 100
x <- runif(n)
resp <- 3 + 10*x + rnorm(n)
pred <- predict(lm(resp ~ x), data.frame(x))

list("response" = resp, "predicted" = pred)

```

Next we will test our function using the values we created for `resp` and `pred`.

```{r testing the getRMSE function}

getRMSE <- function(x, y) {
  for (i in x) {  
    diff_sq <- ((x - y)**2)
  } 

  RMSE <- sqrt(mean(diff_sq))

    
  # output the result
  list("RMSE" = RMSE)
}

getRMSE(resp, pred)

```

Now that we have successfully tested our function, we are going to replace two response values with missing values using (NA_real\_). We will call this new response vector `resp_NA`.

```{r replace 2 response values}
replace_values <- c(resp[1], resp[100])

resp_NA <- replace(resp, resp %in% replace_values, NA_real_)

list("response_NA" = resp_NA)
```

Next we will test our `getRMSE` function to determine how it responds with and without adding code to address the missing values in `resp_NA`.

First we will test getRMSE without specifying behavior to deal with the missing values. .

```{r run getRMSE with resp_NA}

getRMSE(resp_NA, pred)

```

Running `resp_NA` through `getRMSE` produces the result of "NA". This is due to the two NA values in the response variable not being suitable for computations, even while being numeric values themselves.

To correct this, we will add code to `getRMSE` that will replace any NA values in an analyzed vector with the mean of the vector's other values. We will call the updated function `getRMSE_2`.

```{r add code to RMSE to account for NAs}

# update getRMSE to account for missing data in response variable, 
# call the updated function getRMSE_2

getRMSE_2 <- function(x, y) {
  x <- replace(x, is.na(x), mean(x, na.rm = TRUE))
  for (i in x) {  
    diff_sq <- ((x - y)**2)
  } 

  RMSE <- sqrt(mean(diff_sq))

    
  # output the result
  list("RMSE" = RMSE)
}

getRMSE_2(resp_NA, pred)


```

#### 2.3. Write `getMAE`

Similar to our `getRMSE` function, we will utilize a loop function to generate the iterative values of `x[i]` and `y[i]` in order to calculate the difference between them. Next we will take the absolute difference of these values, then determine their mean in order to determine the Mean Absolute Deviation (MAE).

```{r develop and test getMAE funciton}
getMAE <- function(x, y) {
  for(i in x) {
    abs_diff <- abs(x-y)
  }
  
  MAE <- mean(abs_diff)
  
  list("MAE" = MAE)
}

getMAE(x_test, y_test)
```

Conducting a generic test using the `x_test` and `y_test` vectors shows that the function did not produce an error. We are ready to further test our function.

#### 2.4. Test `getMAE`

Next, we will use the code provided to again generate vectors `resp` and `pred`. Seeing that this is the same code we used in Step 2, and that we did not alter either of the vectors in Step 2.2, we can safely pass these vectors through our`getMAE` function.

```{r test getMAE using response and predicted data}

getMAE(resp, pred)

```

We will now attempt to reproduce our `MAE` results using a response data set that has missing values. This is the same test we previous did for `getRMSE`, so we will use the response vector `resp_NA` to further test `getMAE`.

```{r test getMAE using response data with missing values}

getMAE(resp_NA, pred)

```

Like with our initial test of passing missing values through `getRMSE`, `getMAE` provides the result of "NA" due to the NA values.

We will now modify the function code to account for NA values, then retest the function using `resp_NA`.

```{r update getMAE code to account for missing data and retest}

getMAE_2 <- function(x, y) {
  x <- replace(x, is.na(x), mean(x, na.rm = TRUE))
  for(i in x) {
    abs_diff <- abs(x-y)
  }
  
  MAE <- mean(abs_diff)
  
  list("MAE" = MAE)

}

getMAE_2(resp_NA, pred)

```

#### 2.5. Generate wrapper function `getRMSE_MAE`

Now that we have established that our `getRMSE` and `getMAE` functions work properly, we will use them as helper functions inside of a wrapper function `getRMSE_MAE` that can be used to return either the RMSE, the MAE, or both results.

When returning the values, we will give them appropriate names to ensure we know which result applies to which statistic. We will generate the function returning both statistics as the default value.

Additionally, we will encase the function code inside of a `try()` function. This is necessary for `getRMSE_MAE` to test if the input values are atomic, numeric, and vectors then output a user generated error message and exit the function if any of these conditions aren't met. Using `try()` allows the program to identify an issue with a single use of the function without preventing the remaining code chunks throughout the program from executing.

First we will generate the function, then test it using our `x_test` and `y_test` generic data to ensure the function works without errors.

```{r develop wrapper fn for combined RMSE and MAE outputs}

getRMSE_MAE <- function(x, y, stat = "both") {
  
  try({
  error_code <- c("The data is not atomic", "The data is not numeric", 
                  "The data is not a vector")
  
  if(!is.atomic(x) | !is.atomic(y)) {
    print(error_code[1])
    break
    }
  
  if(!is.numeric(x) | !is.numeric(y)) {
    print(error_code[2])
    break
    }
  
  if(!is.vector(x) | !is.vector(y)) {
    print(error_code[3])
    break
    }
  
  RMSE <- getRMSE_2(x,y)
  MAE <- getMAE_2(x,y)
  
  if(stat == "both") {
    print(RMSE)
    print(MAE)
  } else if(stat == "RMSE") {
      RMSE
  } else if(stat == "MAE") {
      MAE
  } else {
    "Incorrect Statistic Selection"
  }
 
})
}

getRMSE_MAE(x_test, y_test)
```

The function appears to be operational, so we are read to move on to the next step.

#### 2.6. Test the new wrapper function.

We will again use the provided code to generate response (`resp`) and prediction (`pred`) variables for use in testing our wrapper function.

> set.seed(10)
>
> n \<- 100 x \<- runif(n)
>
> resp \<- 3 + 10\*x + rnorm(n)
>
> pred \<- predict(lm(resp \~ x), data.frame(x))

Because this is the same code we used earlier in this report, and we have not modified either of the vectors earlier throughout the report, we can safely process them through `getRMSE_MAE`.

We will use `getRMSE_MAE` once to output each statistic individually, then once to output both statistics together.

First we will output the `RMSE` value by explicitly listing it in the function values.

```{r use getRMSE_MAE to output only RMSE}

getRMSE_MAE(resp, pred, "RMSE")

```

Next we will output the `MAE` value by explicitly listing it in the function values.

```{r use getRMSE_MAE to output only MAE}

getRMSE_MAE(resp, pred, "MAE")

```

Now we will output both `RMSE` and `MAE` together. Because we have set the default value for `statistic` as "both", we will only input the response and predicted vectors.

```{r use getRMSE_MAE to output both RMSE and MAE}

getRMSE_MAE(resp, pred)

```

We will now repeat testing \`getRMSE_MAE\` after replacing two of the response values with missing values using `NA_real_`.

This is the same process we used earlier in this report to generate our vector `resp_NA`. Because we have not modified `resp_NA` earlier throughout this report, we can safely process it through `getRMSE_MAE`.

Processing `resp_NA`'s values through `getRMSE_MAE` generates resulting outputs .

```{r execute wrapper with NA vector}

getRMSE_MAE(resp_NA, pred)

```

Which is not how the homework is written for this step. Our function works properly while the homework is written in a way that suggests that "NA" responses for both RMSE and MAE should have generated.

We did not receive the expected "NA" responses for both outputs because we used our improved functions `getRMSE_2` and `getMAE_2` when writing `getRMSE_MAE`. Both of these helper functions have code written in them to replace missing values with the mean of the other values in the vector. This resulted in the RMSE and MAE values being output instead of "NA".

Finally, we will test the function by using an incorrect data type, a data frame instead of a vector, for one of our funciton inputs. To do this, we will first generate a data frame using the response and predicted variables, and name it `resp_df`.

```{r generate data frame for conditional response testing}

resp_list <- list("response" = resp, "predicted" = pred)

resp_df <- as_tibble(resp_list)

str(resp_df)

```

Then we will attempt to process the data frame through `getRMSE_MAE`.

```{r test getRMSE_MAE data screening functions}

getRMSE_MAE(resp_df, pred)

```

We see that our screening criteria worked properly, generating an output message while displaying where the error in the function occurred. This error occurred due to the `if` statement testing `!is.atomic()` being `TRUE`, causing the associated `break` command to be executed.

### Task 3: Querying an API and a Tidy-Style Function

#### 3.1. Using GET()

Using `GET()` from the `httr` package, we will pull information from the "newsapi.org" website about a topic that has been in the news lately and store the information in variable \`site_raw_data\`.

```{r use GET() to return topic information}
site_raw_data <- httr::GET("https://newsapi.org/v2/everything?q=Apple&from=2024-06-01&sortBy=popularity&apiKey=b5c4c79305fb46db9e6212948cdf50e0")

site_raw_data
```

The `GET()` function worked properly, so we are ready to move on to the next step.

#### 3.2. Parse the returned information

Next we are going to parse our created variable `site_raw_data` into a data frame with the article information in it. When creating the data frame, we will ensure that the title, author, and description of the articles are listed first. We will also ensure to omit articles from our search that may have been removed by the host site. Lastly, we will sort the results to ensure the most recent articles are listed first.

```{r parse the topic information into a tibble}
parsed <- jsonlite::fromJSON(rawToChar(site_raw_data$content))

  articles <- as.tibble(parsed$articles) |>
    select(title, author, description, everything()) |>
    filter(title != "[Removed]") |>
    arrange(desc(publishedAt))

articles
```

The parsing and data frame generation was a success. We are now ready to combine these separate operations into a function to query articles.

#### 3.3. Write an API query function

Now that we have successfully retrieved and parsed the data into a tibble separately, we will write a quick function that allows the user to easily query the API using inputs for the title/subject, a time period for the search, and an API key.

When developing our function, we tested it using the inputs "Apple", "2024-06-01", and the API that "newsapi.org" provided.

```{r write an API query function}

getArticles <- function(subject, date_start, APIkey) {
  
  subject <- str_replace_all(subject," ", "%20")

  sitestring <-  httr::GET(str_c("https://newsapi.org/v2/everything?q=", subject, "&from=", date_start, "&sortBy=popularity&apiKey=", APIkey)) 

  parsed <- jsonlite::fromJSON(rawToChar(sitestring$content))

  articles <- as.tibble(parsed$articles) |>
    select(title, author, description, everything()) |>
    filter(title != "[Removed]") |>
    arrange(desc(publishedAt))

  articles

}

getArticles("Apple", "2024-06-01", "b5c4c79305fb46db9e6212948cdf50e0")

```

We see that our initial code works, so let's test it out two times using more complicated title/subject entries.

Searching for "Caitlin Clark"

```{r test funciton using subject values with a space in them}
getArticles("Caitlin Clark", "2024-06-10", "b5c4c79305fb46db9e6212948cdf50e0")

```

Searching for "United States heat wave"

```{r test funciton using subject values with multiple spaces in them}

getArticles("United States heat wave", "2024-06-01", "b5c4c79305fb46db9e6212948cdf50e0")

```

Each of these iterations are a success. However, there is a flaw in the code design that could not be resolved. I was not able to find any code online that would assist with taking various ways of inputting the date and converting it into the `ymd()` format required for URL use.
