[
  {
    "objectID": "Homework4.html",
    "href": "Homework4.html",
    "title": "Homework 4 - Hodge Podge",
    "section": "",
    "text": "Task 1 for this homework assignment is practice with answering the types of questions that will be asked on the next exam.\nTask 2 of the assignment involves writing R functions manually create functions that generate the Root Mean Square Error (RMSE) and Mean Absolute Deviation (MAE) given a set of response values.\nTask 3 of the assignment focuses on querying an API and writing a function that queries the API and\n\n\n\nWhat is the purpose of the lapply() function? What is the equivalent purrr function?\n\nThe purpose lapply() is to apply a function to all variables in a data frame. lapplytreats the variables in data frames as a list, and applies a called function to all objects in the list. The equivalent purrr function tolapply()ismap().\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply())\n\nlapply(my_list, cor(numeric_matrix, method = “kendall”))\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\nmap() is more consistent and has additional helper funcitons for use in analysis\n\nWhat is a side-effect function?\n\nA side-effect funciton is one where the state of the data is changed while returning a value. Some examples are print() and plot() where the function takes the data and creates the different outputs.\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\nThe sd() function is global throughout R (via R packages). When use inside of a function, sd is a temporary variable that is local to the funciton it is in. Once the functioncode is finished running, the variable sd does not exist.\n\n\n\n\n\nBefore we write any code, we want to ensure we establish a library for the functions to operate from so the program renders to Quarto properly.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(dplyr)\n\n\n\nStep 1 of task 2 is to write a basic function called getRMSE() that takes in a vector of responses, a vector of predictions, and outputs the RMSE.\n\n# name the function \"getRMSE\", define \"x\" as our response values and \"y\" as our predicted values. \n\ngetRMSE &lt;- function(x, y) {\n\n\n# generate the loop required to subtract each predicted value from the corresponding response value.\n\n  for (i in x) {  \n\n\n# subtract the predicted values from the observed values, square the difference, sum the values, establish the mean of the sum, then take the square root of the mean. \n# The order of which variable is subtracted from which doesn't matter due to squaring the difference for each iteration of the loop. \n    \n  diff_sq &lt;- ((x - y)**2)\n \n  } \n\n  \n# take the square root of the mean of the diff_sq, this is the RMSE\n  \n  RMSE &lt;- sqrt(mean(diff_sq))\n\n    \n  # output the result\n  RMSE\n}\n\n\n# quickly test the function using 10 through 100 by ten as the response and the mean as the predicted value for each response to ensure there are no error codes\nx_test &lt;- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\ny_test &lt;- c(55, 55, 55, 55, 55, 55, 55, 55, 55, 55)\n\ngetRMSE(x_test, y_test)\n\n[1] 28.72281\n\n\nThe generic run of our function did not produce an error code, so we’re ready to move on to step 2.\n\n\n\nStep 2 of task 2 is to generate response and predicted values for x, then process those values through our getRMSE function.\nFirst we will run the code provided in the homework assignment to create vectors of response values and predicted values. We will title these vectors resp and pred respectively.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nNext we will test our function using the values we created for resp and pred.\n\ngetRMSE &lt;- function(x, y) {\n  for (i in x) {  \n    diff_sq &lt;- ((x - y)**2)\n  } \n\n  RMSE &lt;- sqrt(mean(diff_sq))\n\n    \n  # output the result\n  RMSE\n}\n\ngetRMSE(resp, pred)\n\n[1] 0.9581677\n\n\nNow that we have successfully tested our function, we are going to replace two response values with missing values using (NA_real_). We will call this new response vector resp_NA.\n\nreplace_values &lt;- c(resp[1], resp[100])\n\nresp_NA &lt;- replace(resp, resp %in% replace_values, NA_real_)\n\nNext we will test our getRMSE function to determine how it responds with and without adding code to address the missing values in resp_NA.\nFirst we will test getRMSE without specifying behavior to deal with the missing values. We will save the results of this test as RMSE_NA_without_specs.\n\nRMSE_NA_without_specs &lt;- getRMSE(resp_NA, pred)\n\nRMSE_NA_without_specs\n\n[1] NA\n\n\nRunning the new vector through getRMSE produces the result of “NA”. This is due to the two NA values in the response variable not being suitable for computations, even while being numeric values themselves.\nTo correct this, we will add code to getRMSE that will replace any NA values in an analyzed vector with the mean of the vector’s other values. We will call the updated function getRMSE_2.\n\n#update getRMSE to account for missing data in response variable, call the updated function getRMSE_2\n\ngetRMSE_2 &lt;- function(x, y) {\n  x &lt;- replace(x, is.na(x), mean(x, na.rm = TRUE))\n  for (i in x) {  \n    diff_sq &lt;- ((x - y)**2)\n  } \n\n  RMSE &lt;- sqrt(mean(diff_sq))\n\n    \n  # output the result\n  RMSE\n}\n\ngetRMSE_2(resp_NA, pred)\n\n[1] 1.053783\n\n\n\n\n\nSimilar to our getRMSE function, we will utilize a loop function to generate the iterative values of x[i] and y[i] in order to calculate the difference between them. Next we will take the absolute difference of these values, then determine their mean in order to determine the Mean Absolute Deviaton (MAE).\n\ngetMAE &lt;- function(x, y) {\n  for(i in x) {\n    abs_diff &lt;- abs(x-y)\n  }\n  \n  MAE &lt;- mean(abs_diff)\n  \n  MAE\n}\n\ngetMAE(x_test, y_test)\n\n[1] 25\n\n\nConducting a generic test using the x_test and y_test vectors shows that the function did not produce an error. We are ready to further test our function.\n\n\n\nNext, we will use the code provided go generate vectors resp`` andpred. Seeing that this is the same code we used in Step 2, and that we did not alter these vectors in Step 2.2, we can safely pass these vectors through ourgetMAE` function.\n\ngetMAE(resp, pred)\n\n[1] 0.8155776\n\n\nWe will now attempt to reproduce our resutlts using a response data set that has missing values. This is the same test we previous did for getRMSE, so we will use the response vector resp_NA to further test getMAE.\n\ngetMAE(resp_NA, pred)\n\n[1] NA\n\n\nLike with our initial test of passing missing values through getRMSE, get MAE provides the result of “NA” due to the NA values.\nWe will now modify the function code to account for NA values, then retest the function using resp_NA\n\ngetMAE_2 &lt;- function(x, y) {\n  x &lt;- replace(x, is.na(x), mean(x, na.rm = TRUE))\n  for(i in x) {\n    abs_diff &lt;- abs(x-y)\n  }\n  \n  MAE &lt;- mean(abs_diff)\n  \n  MAE\n}\n\ngetMAE_2(resp_NA, pred)\n\n[1] 0.8584455\n\n\n\n\n\nNow that we have established that our getRMSE and getMAE functions work properly, we will use them as helper functions inside of a wrapper function getRMSE_MAE that can be used to return either getRMSE, getMAE, or both results. When returning the values, we will give them appropriate names to ensure we know which result applies to which statistic.\nFirst we will generate the function, then test it using generic data to ensure it works without errors.\n\ngetRMSE_MAE &lt;- function(x, y, stat = \"both\") {\n  \n  try({\n  error_code &lt;- c(\"The data is not atomic\", \"The data is not numeric\", \"The data is not a vector\")\n  \n  \n  if(!is.atomic(x) | !is.atomic(y)) {\n    print(error_code[1])\n    break\n    \n  }\n  \n  if(!is.numeric(x) | !is.numeric(y)) {\n    print(error_code[2])\n    break\n    \n  }\n  \n  if(!is.vector(x) | !is.vector(y)) {\n    print(error_code[3])\n    break\n    \n  }\n  \n  \n  RMSE &lt;- getRMSE_2(x,y)\n  MAE &lt;- getMAE_2(x,y)\n  \n  if(stat == \"both\") {\n    list(\"RMSE\" = RMSE, \"MAE\" = MAE)\n  } else if(stat == \"RMSE\") {\n      list(\"RMSE\" = RMSE)\n  } else if(stat == \"MAE\") {\n      list(\"MAE\" = MAE)\n  }\n  \n})\n}\n\ngetRMSE_MAE(x_test, y_test)\n\n$RMSE\n[1] 28.72281\n\n$MAE\n[1] 25\n\n\nThe function appears to be operational, so we are read to move on to the next step.\n\n\n\nUse the provided code to generate response and prediction variables for use.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nNext, test the wrapper function using the data. Call it once for each metric individually, then once specifying both metrics.\nFirst we will call only the RMSE value by explicitly writing it in the function values.\n\ngetRMSE_MAE(resp, pred, \"RMSE\")\n\n$RMSE\n[1] 0.9581677\n\n\nNext we will call only the MAE value by explicitly writing it in the function values\n\ngetRMSE_MAE(resp, pred, \"MAE\")\n\n$MAE\n[1] 0.8155776\n\n\nNow we will call both RMSE and MAE. Because we have set the default value for statistic as “both”, we will only input the response and predicted vectors.\n\ngetRMSE_MAE(resp, pred)\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.8155776\n\n\nWe will now repeat this process after replacing two of the response values with missing values using NA_real_. Instead of re-creating a vector with missing values, we will re-use the vector resp_NA, with values listed here.\n\nresp_NA\n\n  [1]        NA  5.733128  8.637031 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399  7.587703  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925  7.666618\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494  9.180810  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177        NA\n\n\nNext we will process resp_NA through getRMSE_MAE to determine if the function will process the data.\n\ngetRMSE_MAE(resp_NA, pred)\n\n$RMSE\n[1] 1.053783\n\n$MAE\n[1] 0.8584455\n\n\nWe see that our function works properly, which is not how the homework is written for this step.\nBecause we used the functions getRMSE_2 and getMAE_2 (both of which have code written in them to account for missing values) when writing getRMSE_MAE, we did not receive the expected “NA” responses for both the RMSE and MAE outputs.\nFinally, we will test the function by using incorrect data type (i.e. a data frame instead of a vector).\nFirst we will generate a data frame using the response and predicted variables, and name it resp_df\n\nresp_df &lt;- list(resp, pred)\n\nThen we will attempt to process the data frame through getRMSE_MAE.\n\ngetRMSE_MAE(resp_df, pred)\n\n[1] \"The data is not atomic\"\nError in try({ : no loop for break/next, jumping to top level\n\n\n\n\n\n\nAPI Key for read-in is:\nb5c4c79305fb46db9e6212948cdf50e0\n\n\nUse GET() from the httr package to return information about a topic that has been in the news lately. To do this, we will use the default value of “/v2/everything” in our URL to ensure we return the maximum number of articles.\n\nsite_raw_data &lt;- httr::GET(\"https://newsapi.org/v2/everything?q=Caitlin%20Clark&from=2024-06-01&sortBy=popularity&apiKey=b5c4c79305fb46db9e6212948cdf50e0\")\n\n\n\n\nParse the returned information into a data frame with the article information in it.\n\nparsed &lt;- jsonlite::fromJSON(rawToChar(site_raw_data$content))\n\narticles &lt;- as.tibble(parsed$articles) |&gt;\n  filter(title != \"[Removed]\")\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\narticles\n\n# A tibble: 100 × 8\n   source$id $name author title description url   urlToImage publishedAt content\n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 &lt;NA&gt;      NPR   Becky… Cait… \"Caitlin C… http… https://m… 2024-06-09… \"Caitl…\n 2 &lt;NA&gt;      NPR   Brian… WNBA… \"The India… http… https://n… 2024-06-09… \"One o…\n 3 &lt;NA&gt;      NPR   Becky… The … \"With reco… http… https://n… 2024-06-11… \"More …\n 4 &lt;NA&gt;      NPR   Danie… Satu… \"NPR's Dan… http… https://m… 2024-06-15… \"NPR's…\n 5 &lt;NA&gt;      NPR   Emma … WNBA… \"The \\\"Dou… http… https://n… 2024-06-21… \"Chica…\n 6 business… Busi… Joi-M… Insi… \"In Saturd… http… https://i… 2024-06-22… \"Getty…\n 7 business… Busi… Ashle… Athl… \"Athlete m… http… https://i… 2024-06-17… \"Pete …\n 8 business… Busi… Dan D… 'Qui… \"'Quiet va… http… https://i… 2024-06-20… \"Tyler…\n 9 usa-today USA … Dana … Cait… \"Eli wants… http… https://s… 2024-06-13… \"Eli w…\n10 time      Time  Sean … Let … \"Caitlin C… http… https://a… 2024-06-10… \"Caitl…\n# ℹ 90 more rows\n\n\n\n\n\nNow that we have successfully retrieved and parsed the data into a tibble separately, we will write a quick function that allows the user to easily query the API using inputs for the title/subject, a time period for the search, and an API key.\nWhen developing our function, we tested it using the inputs “Apple”, “2024-06-01”, and the API that “newsapi.org” provided.\n\ngetArticles &lt;- function(subject, date_start, APIkey) {\n  \n  subject &lt;- str_replace_all(subject,\" \", \"%20\")\n\n  sitestring &lt;-  httr::GET(str_c(\"https://newsapi.org/v2/everything?q=\", subject, \"&from=\", date_start, \"&sortBy=popularity&apiKey=\", APIkey)) \n\n  parsed &lt;- jsonlite::fromJSON(rawToChar(sitestring$content))\n\n  articles &lt;- as.tibble(parsed$articles) |&gt;\n    select(title, author, description, everything()) |&gt;\n    filter(title != \"[Removed]\") |&gt;\n    arrange(desc(publishedAt))\n\n  articles\n\n}\n\ngetArticles(\"Apple\", \"2024-06-01\", \"b5c4c79305fb46db9e6212948cdf50e0\")\n\n# A tibble: 76 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Typing to … Victo… \"In iOS 18… the-verge http… https://c… 2024-06-22… \"Typin…\n 2 Bugatti’s … Jason… \"Furiously… wired     http… https://m… 2024-06-20… \"The r…\n 3 EU delays … Kris … \"European … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-20… \"If yo…\n 4 Ex-OpenAI … Benj … \"Safe Supe… ars-tech… http… https://c… 2024-06-20… \"Enlar…\n 5 Xbox Game … Quent… \"CDKeys is… the-verge http… https://c… 2024-06-19… \"Xbox …\n 6 The Mornin… Mat S… \"Nintendo … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-19… \"If yo…\n 7 This unive… Quent… \"Cantata h… the-verge http… https://c… 2024-06-18… \"This …\n 8 Nvidia ove… Richa… \"Nvidia’s … the-verge http… https://c… 2024-06-18… \"Nvidi…\n 9 Beats Solo… Billy… \"The idea … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-18… \"If yo…\n10 Your Apple… Dua R… \"WWDC 2024… &lt;NA&gt;      http… https://i… 2024-06-18… \"WWDC …\n# ℹ 66 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;\n\n\nWe see that our inital code works, so let’s test it out two times using more complicated entries.\nSearching for “Caitlin Clark”\n\ngetArticles(\"Caitlin Clark\", \"2024-06-10\", \"b5c4c79305fb46db9e6212948cdf50e0\")\n\n# A tibble: 96 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Fever's Ca… \"Jose… \"Indiana F… bleacher… http… https://m… 2024-06-22… \"Jeff …\n 2 Insider To… \"Joi-… \"In Saturd… business… http… https://i… 2024-06-22… \"Getty…\n 3 Aces Top W… \"Jay … \"Record vi… &lt;NA&gt;      http… https://i… 2024-06-22… \"In th…\n 4 Caitlin Cl… \"Andr… \"The India… bleacher… http… https://m… 2024-06-22… \"Adam …\n 5 WNBA rooki… \"Emma… \"The \\\"Dou… &lt;NA&gt;      http… https://n… 2024-06-21… \"Chica…\n 6 Caitlin Cl… \"Paul… \"Indiana F… bleacher… http… https://m… 2024-06-21… \"Emile…\n 7 The Need F… \"Bria… \"Financial… &lt;NA&gt;      http… https://i… 2024-06-21… \"In Ju…\n 8 A'ja Wilso… \"DOUG… \"A’ja Wils… abc-news  http… https://i… 2024-06-21… \"NEW Y…\n 9 Wilson, Cl… \"Mich… \"The Aces'… espn      http… https://a… 2024-06-21… \"The L…\n10 A'ja Wilso… \"Mike… \"A'ja Wils… bleacher… http… https://m… 2024-06-21… \"Ethan…\n# ℹ 86 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;\n\n\nSearching for “West Virginial DMV”\n\ngetArticles(\"heat wave\", \"2024-06-01\", \"b5c4c79305fb46db9e6212948cdf50e0\")\n\n# A tibble: 100 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Insider To… Joi-M… \"In Saturd… business… http… https://i… 2024-06-22… \"Getty…\n 2 Florida re… Jenny… \"Scientist… &lt;NA&gt;      http… https://n… 2024-06-22… \"MIAMI…\n 3 Why Extrem… Chant… \"The “heat… time      http… https://a… 2024-06-21… \"The h…\n 4 U.S. Citie… Simmo… \"The Natio… time      http… https://a… 2024-06-21… \"High …\n 5 In Convers… info@… \"It's prob… &lt;NA&gt;      http… https://i… 2024-06-21… \"It’s …\n 6 5 Ways a P… Jon R… \"These big… &lt;NA&gt;      http… https://w… 2024-06-21… \"A wee…\n 7 The myster… Caitl… \"The unpre… &lt;NA&gt;      http… https://s… 2024-06-21… \"This …\n 8 Heat Dome … Chels… \"With a he… &lt;NA&gt;      http… https://s… 2024-06-21… \"CLIMA…\n 9 Extreme te… Miche… \"NPR's Mic… &lt;NA&gt;      http… https://m… 2024-06-21… \"NPR's…\n10 New rules … Aleja… \"Californi… &lt;NA&gt;      http… https://n… 2024-06-21… \"Calif…\n# ℹ 90 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;"
  },
  {
    "objectID": "Homework4.html#task-1-conceptual-questions",
    "href": "Homework4.html#task-1-conceptual-questions",
    "title": "Homework 4 - Hodge Podge",
    "section": "",
    "text": "What is the purpose of the lapply() function? What is the equivalent purrr function?\n\nThe purpose lapply() is to apply a function to all variables in a data frame. lapplytreats the variables in data frames as a list, and applies a called function to all objects in the list. The equivalent purrr function tolapply()ismap().\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply())\n\nlapply(my_list, cor(numeric_matrix, method = “kendall”))\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\nmap() is more consistent and has additional helper funcitons for use in analysis\n\nWhat is a side-effect function?\n\nA side-effect funciton is one where the state of the data is changed while returning a value. Some examples are print() and plot() where the function takes the data and creates the different outputs.\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\nThe sd() function is global throughout R (via R packages). When use inside of a function, sd is a temporary variable that is local to the funciton it is in. Once the functioncode is finished running, the variable sd does not exist."
  },
  {
    "objectID": "Homework4.html#task-2-writing-r-functions",
    "href": "Homework4.html#task-2-writing-r-functions",
    "title": "Homework 4 - Hodge Podge",
    "section": "",
    "text": "Before we write any code, we want to ensure we establish a library for the functions to operate from so the program renders to Quarto properly.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(dplyr)\n\n\n\nStep 1 of task 2 is to write a basic function called getRMSE() that takes in a vector of responses, a vector of predictions, and outputs the RMSE.\n\n# name the function \"getRMSE\", define \"x\" as our response values and \"y\" as our predicted values. \n\ngetRMSE &lt;- function(x, y) {\n\n\n# generate the loop required to subtract each predicted value from the corresponding response value.\n\n  for (i in x) {  \n\n\n# subtract the predicted values from the observed values, square the difference, sum the values, establish the mean of the sum, then take the square root of the mean. \n# The order of which variable is subtracted from which doesn't matter due to squaring the difference for each iteration of the loop. \n    \n  diff_sq &lt;- ((x - y)**2)\n \n  } \n\n  \n# take the square root of the mean of the diff_sq, this is the RMSE\n  \n  RMSE &lt;- sqrt(mean(diff_sq))\n\n    \n  # output the result\n  RMSE\n}\n\n\n# quickly test the function using 10 through 100 by ten as the response and the mean as the predicted value for each response to ensure there are no error codes\nx_test &lt;- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\ny_test &lt;- c(55, 55, 55, 55, 55, 55, 55, 55, 55, 55)\n\ngetRMSE(x_test, y_test)\n\n[1] 28.72281\n\n\nThe generic run of our function did not produce an error code, so we’re ready to move on to step 2.\n\n\n\nStep 2 of task 2 is to generate response and predicted values for x, then process those values through our getRMSE function.\nFirst we will run the code provided in the homework assignment to create vectors of response values and predicted values. We will title these vectors resp and pred respectively.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nNext we will test our function using the values we created for resp and pred.\n\ngetRMSE &lt;- function(x, y) {\n  for (i in x) {  \n    diff_sq &lt;- ((x - y)**2)\n  } \n\n  RMSE &lt;- sqrt(mean(diff_sq))\n\n    \n  # output the result\n  RMSE\n}\n\ngetRMSE(resp, pred)\n\n[1] 0.9581677\n\n\nNow that we have successfully tested our function, we are going to replace two response values with missing values using (NA_real_). We will call this new response vector resp_NA.\n\nreplace_values &lt;- c(resp[1], resp[100])\n\nresp_NA &lt;- replace(resp, resp %in% replace_values, NA_real_)\n\nNext we will test our getRMSE function to determine how it responds with and without adding code to address the missing values in resp_NA.\nFirst we will test getRMSE without specifying behavior to deal with the missing values. We will save the results of this test as RMSE_NA_without_specs.\n\nRMSE_NA_without_specs &lt;- getRMSE(resp_NA, pred)\n\nRMSE_NA_without_specs\n\n[1] NA\n\n\nRunning the new vector through getRMSE produces the result of “NA”. This is due to the two NA values in the response variable not being suitable for computations, even while being numeric values themselves.\nTo correct this, we will add code to getRMSE that will replace any NA values in an analyzed vector with the mean of the vector’s other values. We will call the updated function getRMSE_2.\n\n#update getRMSE to account for missing data in response variable, call the updated function getRMSE_2\n\ngetRMSE_2 &lt;- function(x, y) {\n  x &lt;- replace(x, is.na(x), mean(x, na.rm = TRUE))\n  for (i in x) {  \n    diff_sq &lt;- ((x - y)**2)\n  } \n\n  RMSE &lt;- sqrt(mean(diff_sq))\n\n    \n  # output the result\n  RMSE\n}\n\ngetRMSE_2(resp_NA, pred)\n\n[1] 1.053783\n\n\n\n\n\nSimilar to our getRMSE function, we will utilize a loop function to generate the iterative values of x[i] and y[i] in order to calculate the difference between them. Next we will take the absolute difference of these values, then determine their mean in order to determine the Mean Absolute Deviaton (MAE).\n\ngetMAE &lt;- function(x, y) {\n  for(i in x) {\n    abs_diff &lt;- abs(x-y)\n  }\n  \n  MAE &lt;- mean(abs_diff)\n  \n  MAE\n}\n\ngetMAE(x_test, y_test)\n\n[1] 25\n\n\nConducting a generic test using the x_test and y_test vectors shows that the function did not produce an error. We are ready to further test our function.\n\n\n\nNext, we will use the code provided go generate vectors resp`` andpred. Seeing that this is the same code we used in Step 2, and that we did not alter these vectors in Step 2.2, we can safely pass these vectors through ourgetMAE` function.\n\ngetMAE(resp, pred)\n\n[1] 0.8155776\n\n\nWe will now attempt to reproduce our resutlts using a response data set that has missing values. This is the same test we previous did for getRMSE, so we will use the response vector resp_NA to further test getMAE.\n\ngetMAE(resp_NA, pred)\n\n[1] NA\n\n\nLike with our initial test of passing missing values through getRMSE, get MAE provides the result of “NA” due to the NA values.\nWe will now modify the function code to account for NA values, then retest the function using resp_NA\n\ngetMAE_2 &lt;- function(x, y) {\n  x &lt;- replace(x, is.na(x), mean(x, na.rm = TRUE))\n  for(i in x) {\n    abs_diff &lt;- abs(x-y)\n  }\n  \n  MAE &lt;- mean(abs_diff)\n  \n  MAE\n}\n\ngetMAE_2(resp_NA, pred)\n\n[1] 0.8584455\n\n\n\n\n\nNow that we have established that our getRMSE and getMAE functions work properly, we will use them as helper functions inside of a wrapper function getRMSE_MAE that can be used to return either getRMSE, getMAE, or both results. When returning the values, we will give them appropriate names to ensure we know which result applies to which statistic.\nFirst we will generate the function, then test it using generic data to ensure it works without errors.\n\ngetRMSE_MAE &lt;- function(x, y, stat = \"both\") {\n  \n  try({\n  error_code &lt;- c(\"The data is not atomic\", \"The data is not numeric\", \"The data is not a vector\")\n  \n  \n  if(!is.atomic(x) | !is.atomic(y)) {\n    print(error_code[1])\n    break\n    \n  }\n  \n  if(!is.numeric(x) | !is.numeric(y)) {\n    print(error_code[2])\n    break\n    \n  }\n  \n  if(!is.vector(x) | !is.vector(y)) {\n    print(error_code[3])\n    break\n    \n  }\n  \n  \n  RMSE &lt;- getRMSE_2(x,y)\n  MAE &lt;- getMAE_2(x,y)\n  \n  if(stat == \"both\") {\n    list(\"RMSE\" = RMSE, \"MAE\" = MAE)\n  } else if(stat == \"RMSE\") {\n      list(\"RMSE\" = RMSE)\n  } else if(stat == \"MAE\") {\n      list(\"MAE\" = MAE)\n  }\n  \n})\n}\n\ngetRMSE_MAE(x_test, y_test)\n\n$RMSE\n[1] 28.72281\n\n$MAE\n[1] 25\n\n\nThe function appears to be operational, so we are read to move on to the next step.\n\n\n\nUse the provided code to generate response and prediction variables for use.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nNext, test the wrapper function using the data. Call it once for each metric individually, then once specifying both metrics.\nFirst we will call only the RMSE value by explicitly writing it in the function values.\n\ngetRMSE_MAE(resp, pred, \"RMSE\")\n\n$RMSE\n[1] 0.9581677\n\n\nNext we will call only the MAE value by explicitly writing it in the function values\n\ngetRMSE_MAE(resp, pred, \"MAE\")\n\n$MAE\n[1] 0.8155776\n\n\nNow we will call both RMSE and MAE. Because we have set the default value for statistic as “both”, we will only input the response and predicted vectors.\n\ngetRMSE_MAE(resp, pred)\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.8155776\n\n\nWe will now repeat this process after replacing two of the response values with missing values using NA_real_. Instead of re-creating a vector with missing values, we will re-use the vector resp_NA, with values listed here.\n\nresp_NA\n\n  [1]        NA  5.733128  8.637031 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399  7.587703  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925  7.666618\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494  9.180810  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177        NA\n\n\nNext we will process resp_NA through getRMSE_MAE to determine if the function will process the data.\n\ngetRMSE_MAE(resp_NA, pred)\n\n$RMSE\n[1] 1.053783\n\n$MAE\n[1] 0.8584455\n\n\nWe see that our function works properly, which is not how the homework is written for this step.\nBecause we used the functions getRMSE_2 and getMAE_2 (both of which have code written in them to account for missing values) when writing getRMSE_MAE, we did not receive the expected “NA” responses for both the RMSE and MAE outputs.\nFinally, we will test the function by using incorrect data type (i.e. a data frame instead of a vector).\nFirst we will generate a data frame using the response and predicted variables, and name it resp_df\n\nresp_df &lt;- list(resp, pred)\n\nThen we will attempt to process the data frame through getRMSE_MAE.\n\ngetRMSE_MAE(resp_df, pred)\n\n[1] \"The data is not atomic\"\nError in try({ : no loop for break/next, jumping to top level"
  },
  {
    "objectID": "Homework4.html#task-3-querying-an-api-and-a-tidy-style-function",
    "href": "Homework4.html#task-3-querying-an-api-and-a-tidy-style-function",
    "title": "Homework 4 - Hodge Podge",
    "section": "",
    "text": "API Key for read-in is:\nb5c4c79305fb46db9e6212948cdf50e0\n\n\nUse GET() from the httr package to return information about a topic that has been in the news lately. To do this, we will use the default value of “/v2/everything” in our URL to ensure we return the maximum number of articles.\n\nsite_raw_data &lt;- httr::GET(\"https://newsapi.org/v2/everything?q=Caitlin%20Clark&from=2024-06-01&sortBy=popularity&apiKey=b5c4c79305fb46db9e6212948cdf50e0\")\n\n\n\n\nParse the returned information into a data frame with the article information in it.\n\nparsed &lt;- jsonlite::fromJSON(rawToChar(site_raw_data$content))\n\narticles &lt;- as.tibble(parsed$articles) |&gt;\n  filter(title != \"[Removed]\")\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\narticles\n\n# A tibble: 100 × 8\n   source$id $name author title description url   urlToImage publishedAt content\n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 &lt;NA&gt;      NPR   Becky… Cait… \"Caitlin C… http… https://m… 2024-06-09… \"Caitl…\n 2 &lt;NA&gt;      NPR   Brian… WNBA… \"The India… http… https://n… 2024-06-09… \"One o…\n 3 &lt;NA&gt;      NPR   Becky… The … \"With reco… http… https://n… 2024-06-11… \"More …\n 4 &lt;NA&gt;      NPR   Danie… Satu… \"NPR's Dan… http… https://m… 2024-06-15… \"NPR's…\n 5 &lt;NA&gt;      NPR   Emma … WNBA… \"The \\\"Dou… http… https://n… 2024-06-21… \"Chica…\n 6 business… Busi… Joi-M… Insi… \"In Saturd… http… https://i… 2024-06-22… \"Getty…\n 7 business… Busi… Ashle… Athl… \"Athlete m… http… https://i… 2024-06-17… \"Pete …\n 8 business… Busi… Dan D… 'Qui… \"'Quiet va… http… https://i… 2024-06-20… \"Tyler…\n 9 usa-today USA … Dana … Cait… \"Eli wants… http… https://s… 2024-06-13… \"Eli w…\n10 time      Time  Sean … Let … \"Caitlin C… http… https://a… 2024-06-10… \"Caitl…\n# ℹ 90 more rows\n\n\n\n\n\nNow that we have successfully retrieved and parsed the data into a tibble separately, we will write a quick function that allows the user to easily query the API using inputs for the title/subject, a time period for the search, and an API key.\nWhen developing our function, we tested it using the inputs “Apple”, “2024-06-01”, and the API that “newsapi.org” provided.\n\ngetArticles &lt;- function(subject, date_start, APIkey) {\n  \n  subject &lt;- str_replace_all(subject,\" \", \"%20\")\n\n  sitestring &lt;-  httr::GET(str_c(\"https://newsapi.org/v2/everything?q=\", subject, \"&from=\", date_start, \"&sortBy=popularity&apiKey=\", APIkey)) \n\n  parsed &lt;- jsonlite::fromJSON(rawToChar(sitestring$content))\n\n  articles &lt;- as.tibble(parsed$articles) |&gt;\n    select(title, author, description, everything()) |&gt;\n    filter(title != \"[Removed]\") |&gt;\n    arrange(desc(publishedAt))\n\n  articles\n\n}\n\ngetArticles(\"Apple\", \"2024-06-01\", \"b5c4c79305fb46db9e6212948cdf50e0\")\n\n# A tibble: 76 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Typing to … Victo… \"In iOS 18… the-verge http… https://c… 2024-06-22… \"Typin…\n 2 Bugatti’s … Jason… \"Furiously… wired     http… https://m… 2024-06-20… \"The r…\n 3 EU delays … Kris … \"European … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-20… \"If yo…\n 4 Ex-OpenAI … Benj … \"Safe Supe… ars-tech… http… https://c… 2024-06-20… \"Enlar…\n 5 Xbox Game … Quent… \"CDKeys is… the-verge http… https://c… 2024-06-19… \"Xbox …\n 6 The Mornin… Mat S… \"Nintendo … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-19… \"If yo…\n 7 This unive… Quent… \"Cantata h… the-verge http… https://c… 2024-06-18… \"This …\n 8 Nvidia ove… Richa… \"Nvidia’s … the-verge http… https://c… 2024-06-18… \"Nvidi…\n 9 Beats Solo… Billy… \"The idea … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-18… \"If yo…\n10 Your Apple… Dua R… \"WWDC 2024… &lt;NA&gt;      http… https://i… 2024-06-18… \"WWDC …\n# ℹ 66 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;\n\n\nWe see that our inital code works, so let’s test it out two times using more complicated entries.\nSearching for “Caitlin Clark”\n\ngetArticles(\"Caitlin Clark\", \"2024-06-10\", \"b5c4c79305fb46db9e6212948cdf50e0\")\n\n# A tibble: 96 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Fever's Ca… \"Jose… \"Indiana F… bleacher… http… https://m… 2024-06-22… \"Jeff …\n 2 Insider To… \"Joi-… \"In Saturd… business… http… https://i… 2024-06-22… \"Getty…\n 3 Aces Top W… \"Jay … \"Record vi… &lt;NA&gt;      http… https://i… 2024-06-22… \"In th…\n 4 Caitlin Cl… \"Andr… \"The India… bleacher… http… https://m… 2024-06-22… \"Adam …\n 5 WNBA rooki… \"Emma… \"The \\\"Dou… &lt;NA&gt;      http… https://n… 2024-06-21… \"Chica…\n 6 Caitlin Cl… \"Paul… \"Indiana F… bleacher… http… https://m… 2024-06-21… \"Emile…\n 7 The Need F… \"Bria… \"Financial… &lt;NA&gt;      http… https://i… 2024-06-21… \"In Ju…\n 8 A'ja Wilso… \"DOUG… \"A’ja Wils… abc-news  http… https://i… 2024-06-21… \"NEW Y…\n 9 Wilson, Cl… \"Mich… \"The Aces'… espn      http… https://a… 2024-06-21… \"The L…\n10 A'ja Wilso… \"Mike… \"A'ja Wils… bleacher… http… https://m… 2024-06-21… \"Ethan…\n# ℹ 86 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;\n\n\nSearching for “West Virginial DMV”\n\ngetArticles(\"heat wave\", \"2024-06-01\", \"b5c4c79305fb46db9e6212948cdf50e0\")\n\n# A tibble: 100 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Insider To… Joi-M… \"In Saturd… business… http… https://i… 2024-06-22… \"Getty…\n 2 Florida re… Jenny… \"Scientist… &lt;NA&gt;      http… https://n… 2024-06-22… \"MIAMI…\n 3 Why Extrem… Chant… \"The “heat… time      http… https://a… 2024-06-21… \"The h…\n 4 U.S. Citie… Simmo… \"The Natio… time      http… https://a… 2024-06-21… \"High …\n 5 In Convers… info@… \"It's prob… &lt;NA&gt;      http… https://i… 2024-06-21… \"It’s …\n 6 5 Ways a P… Jon R… \"These big… &lt;NA&gt;      http… https://w… 2024-06-21… \"A wee…\n 7 The myster… Caitl… \"The unpre… &lt;NA&gt;      http… https://s… 2024-06-21… \"This …\n 8 Heat Dome … Chels… \"With a he… &lt;NA&gt;      http… https://s… 2024-06-21… \"CLIMA…\n 9 Extreme te… Miche… \"NPR's Mic… &lt;NA&gt;      http… https://m… 2024-06-21… \"NPR's…\n10 New rules … Aleja… \"Californi… &lt;NA&gt;      http… https://n… 2024-06-21… \"Calif…\n# ℹ 90 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;"
  }
]