[
  {
    "objectID": "Homework4.html",
    "href": "Homework4.html",
    "title": "Homework 4 - Hodge Podge",
    "section": "",
    "text": "Task 1 for this homework assignment is practice with answering the types of questions that will be asked on the next exam.\nTask 2 of the assignment involves writing R functions manually create functions that generate the Root Mean Square Error (RMSE) and Mean Absolute Deviation (MAE) given a set of response values.\nTask 3 of the assignment focuses on querying an API and writing a function that queries the API and\n\n\n\nWhat is the purpose of the lapply() function? What is the equivalent purrr function?\n\nThe purpose lapply() is to apply a function to all variables in a data frame. lapplytreats the variables in data frames as a list, and applies a called function to all objects in the list. The equivalent purrr function tolapply()ismap().\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply())\n\nlapply(my_list, cor(numeric_matrix, method = “kendall”))\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\nmap() is more consistent and has additional helper funcitons for use in analysis\n\nWhat is a side-effect function?\n\nA side-effect funciton is one where the state of the data is changed while returning a value. Some examples are print() and plot() where the function takes the data and creates the different outputs.\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\nThe sd() function is global throughout R (via R packages). When use inside of a function, sd is a temporary variable that is local to the funciton it is in. Once the functioncode is finished running, the variable sd does not exist.\n\n\n\n\n\nBefore we write any code, we want to ensure we establish a library for the functions to operate from so the program renders to Quarto properly.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nStep 1 of task 2 is to write a basic function called getRMSE() that takes in a vector of responses, a vector of predictions, and outputs the RMSE.\n\n# name the function \"getRMSE\", define \"x\" as our response\n# values and \"y\" as our predicted values. \n\ngetRMSE &lt;- function(x, y) {\n\n\n# generate the loop required to subtract each predicted \n# value from the corresponding response value.\n\n# subtract the predicted values from the observed values, square the difference, \n# sum the values, establish the mean of the sum, then take\n# the square root of the mean. \n\n# Note: The order of which variable is subtracted from which\n# doesn't matter due to squaring the difference for each\n# iteration of the loop. \n  \n  for (i in x) {  \n  diff_sq &lt;- ((x - y)**2)\n  } \n\n  \n# take the square root of the mean of the diff_sq, define\n# it as \"RMSE\"\n  \n  RMSE &lt;- sqrt(mean(diff_sq))\n\n    \n# output the result\n  list(\"RMSE\" = RMSE)\n}\n\n\n# quickly test the function using 10 through 100 by ten as\n# the response and the mean as the predicted value for each\n# response to ensure there are no error codes\n\nx_test &lt;- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\ny_test &lt;- c(55, 55, 55, 55, 55, 55, 55, 55, 55, 55)\n\ngetRMSE(x_test, y_test)\n\n$RMSE\n[1] 28.72281\n\n\nThe generic run of our function did not produce an error code, so we’re ready to move on to step 2.\n\n\n\nStep 2 of task 2 is to generate response and predicted values for x, then process those values through our getRMSE function.\nFirst we will run the code provided in the homework assignment to create vectors of response values and predicted values. We will title these vectors resp and pred respectively.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nlist(\"response\" = resp, \"predicted\" = pred)\n\n$response\n  [1]  7.674144  5.733128  8.637031 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399  7.587703  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925  7.666618\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494  9.180810  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177  3.387353\n\n$predicted\n        1         2         3         4         5         6         7         8 \n 8.148104  6.053163  7.307135 10.085585  3.739836  5.204247  5.716673  5.693445 \n        9        10        11        12        13        14        15        16 \n 9.279037  7.335984  9.652981  8.777073  4.035984  9.071286  6.588422  7.326985 \n       17        18        19        20        21        22        23        24 \n 3.392964  5.608614  7.013660 11.578506 11.876889  9.274059 10.941555  6.562523 \n       25        26        27        28        29        30        31        32 \n 7.087342 10.226961 11.600984  5.351967 10.896273  6.565957  8.441599  3.822838 \n       33        34        35        36        37        38        39        40 \n 4.623563 12.243368  7.262566 10.655945 11.437790 12.815573 10.005657  8.075302 \n       41        42        43        44        45        46        47        48 \n 5.726624  5.240438  3.001871 10.459905  5.459384  4.533592  3.029100  7.924969 \n       49        50        51        52        53        54        55        56 \n 3.925253 11.217497  6.549574 12.625387  5.417487  7.789709  4.850664  8.938692 \n       57        58        59        60        61        62        63        64 \n 7.647044  7.730136  7.024534  8.125218  3.184053  4.045989  7.745808  6.994831 \n       65        66        67        68        69        70        71        72 \n11.552256 10.795551  8.835719  7.522155  3.725912  5.138510  3.639992  8.429384 \n       73        74        75        76        77        78        79        80 \n 9.545482  8.338708  3.261221  8.548719  6.741992 12.884971  5.537261  5.021745 \n       81        82        83        84        85        86        87        88 \n11.842039  7.698384  5.177431  9.359619  4.976822  3.056559 11.180401  5.714464 \n       89        90        91        92        93        94        95        96 \n 4.590225  4.627202  7.950078 10.276667  9.029635  8.249127  6.834518 11.564354 \n       97        98        99       100 \n 5.450278  8.493829 10.615164  3.164468 \n\n\nNext we will test our function using the values we created for resp and pred.\n\ngetRMSE &lt;- function(x, y) {\n  for (i in x) {  \n    diff_sq &lt;- ((x - y)**2)\n  } \n\n  RMSE &lt;- sqrt(mean(diff_sq))\n\n    \n  # output the result\n  list(\"RMSE\" = RMSE)\n}\n\ngetRMSE(resp, pred)\n\n$RMSE\n[1] 0.9581677\n\n\nNow that we have successfully tested our function, we are going to replace two response values with missing values using (NA_real_). We will call this new response vector resp_NA.\n\nreplace_values &lt;- c(resp[1], resp[100])\n\nresp_NA &lt;- replace(resp, resp %in% replace_values, NA_real_)\n\nlist(\"response_NA\" = resp_NA)\n\n$response_NA\n  [1]        NA  5.733128  8.637031 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399  7.587703  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925  7.666618\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494  9.180810  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177        NA\n\n\nNext we will test our getRMSE function to determine how it responds with and without adding code to address the missing values in resp_NA.\nFirst we will test getRMSE without specifying behavior to deal with the missing values. .\n\ngetRMSE(resp_NA, pred)\n\n$RMSE\n[1] NA\n\n\nRunning resp_NA through getRMSE produces the result of “NA”. This is due to the two NA values in the response variable not being suitable for computations, even while being numeric values themselves.\nTo correct this, we will add code to getRMSE that will replace any NA values in an analyzed vector with the mean of the vector’s other values. We will call the updated function getRMSE_2.\n\n# update getRMSE to account for missing data in response variable, \n# call the updated function getRMSE_2\n\ngetRMSE_2 &lt;- function(x, y) {\n  x &lt;- replace(x, is.na(x), mean(x, na.rm = TRUE))\n  for (i in x) {  \n    diff_sq &lt;- ((x - y)**2)\n  } \n\n  RMSE &lt;- sqrt(mean(diff_sq))\n\n    \n  # output the result\n  list(\"RMSE\" = RMSE)\n}\n\ngetRMSE_2(resp_NA, pred)\n\n$RMSE\n[1] 1.053783\n\n\n\n\n\nSimilar to our getRMSE function, we will utilize a loop function to generate the iterative values of x[i] and y[i] in order to calculate the difference between them. Next we will take the absolute difference of these values, then determine their mean in order to determine the Mean Absolute Deviation (MAE).\n\ngetMAE &lt;- function(x, y) {\n  for(i in x) {\n    abs_diff &lt;- abs(x-y)\n  }\n  \n  MAE &lt;- mean(abs_diff)\n  \n  list(\"MAE\" = MAE)\n}\n\ngetMAE(x_test, y_test)\n\n$MAE\n[1] 25\n\n\nConducting a generic test using the x_test and y_test vectors shows that the function did not produce an error. We are ready to further test our function.\n\n\n\nNext, we will use the code provided to again generate vectors resp and pred. Seeing that this is the same code we used in Step 2, and that we did not alter either of the vectors in Step 2.2, we can safely pass these vectors through ourgetMAE function.\n\ngetMAE(resp, pred)\n\n$MAE\n[1] 0.8155776\n\n\nWe will now attempt to reproduce our MAE results using a response data set that has missing values. This is the same test we previous did for getRMSE, so we will use the response vector resp_NA to further test getMAE.\n\ngetMAE(resp_NA, pred)\n\n$MAE\n[1] NA\n\n\nLike with our initial test of passing missing values through getRMSE, getMAE provides the result of “NA” due to the NA values.\nWe will now modify the function code to account for NA values, then retest the function using resp_NA.\n\ngetMAE_2 &lt;- function(x, y) {\n  x &lt;- replace(x, is.na(x), mean(x, na.rm = TRUE))\n  for(i in x) {\n    abs_diff &lt;- abs(x-y)\n  }\n  \n  MAE &lt;- mean(abs_diff)\n  \n  list(\"MAE\" = MAE)\n\n}\n\ngetMAE_2(resp_NA, pred)\n\n$MAE\n[1] 0.8584455\n\n\n\n\n\nNow that we have established that our getRMSE and getMAE functions work properly, we will use them as helper functions inside of a wrapper function getRMSE_MAE that can be used to return either the RMSE, the MAE, or both results.\nWhen returning the values, we will give them appropriate names to ensure we know which result applies to which statistic. We will generate the function returning both statistics as the default value.\nAdditionally, we will encase the function code inside of a try() function. This is necessary for our function to test if the input values are atomic, numeric, and vectors then output a user generated error message and exit the function if these conditions aren’t met. Using try() allows the program to identify an issue with a single use of the function without preventing the remaining code chunks throughout the program from executing.\nFirst we will generate the function, then test it using our x_test and y_test generic data to ensure the function works without errors.\n\ngetRMSE_MAE &lt;- function(x, y, stat = \"both\") {\n  \n  try({\n  error_code &lt;- c(\"The data is not atomic\", \"The data is not numeric\", \n                  \"The data is not a vector\")\n  \n  if(!is.atomic(x) | !is.atomic(y)) {\n    print(error_code[1])\n    break\n    }\n  \n  if(!is.numeric(x) | !is.numeric(y)) {\n    print(error_code[2])\n    break\n    }\n  \n  if(!is.vector(x) | !is.vector(y)) {\n    print(error_code[3])\n    break\n    }\n  \n  RMSE &lt;- getRMSE_2(x,y)\n  MAE &lt;- getMAE_2(x,y)\n  \n  if(stat == \"both\") {\n    print(RMSE)\n    print(MAE)\n  } else if(stat == \"RMSE\") {\n      RMSE\n  } else if(stat == \"MAE\") {\n      MAE\n  } else {\n    \"Incorrect Statistic Selection\"\n  }\n \n})\n}\n\ngetRMSE_MAE(x_test, y_test)\n\n$RMSE\n[1] 28.72281\n\n$MAE\n[1] 25\n\n\nThe function appears to be operational, so we are read to move on to the next step.\n\n\n\nWe will again use the provided code to generate response (resp) and prediction (pred) variables for use in testing our wrapper function.\n\nset.seed(10) n &lt;- 100 x &lt;- runif(n) resp &lt;- 3 + 10*x + rnorm(n) pred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nBecause this is the same code we used earlier in this report, and we have not modified either of the vectors earlier throughout the report, we can safely process them through getRMSE_MAE.\nWe will use getRMSE_MAE once to output each statistic individually, then once to output both statistics together.\nFirst we will output the RMSE value by explicitly listing it in the function values.\n\ngetRMSE_MAE(resp, pred, \"RMSE\")\n\n$RMSE\n[1] 0.9581677\n\n\nNext we will output the MAE value by explicitly listing it in the function values.\n\ngetRMSE_MAE(resp, pred, \"MAE\")\n\n$MAE\n[1] 0.8155776\n\n\nNow we will output both RMSE and MAE together. Because we have set the default value for statistic as “both”, we will only input the response and predicted vectors.\n\ngetRMSE_MAE(resp, pred)\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.8155776\n\n\nWe will now repeat this process after replacing two of the response values with missing values using NA_real_.\nThis is the same process we used earlier in this report to generate our vector resp_NA. Because we have not modified resp_NA earlier throughout the report, we can safely process it through getRMSE_MAE.\nProcessing resp_NA’s values through getRMSE_MAE generates resulting outputs .\n\ngetRMSE_MAE(resp_NA, pred)\n\n$RMSE\n[1] 1.053783\n\n$MAE\n[1] 0.8584455\n\n\nWhich is not how the homework is written for this step. Our function works properly while the homework is written in a way that suggests that “NA” responses for both RMSE and MAE should have generated.\nWe did not receive the expected “NA” responses for both outputs because we used our improved functions getRMSE_2 and getMAE_2 when writing getRMSE_MAE. Both of these helper functions have code written in them to replace missing values with the mean of the other values in the vector. This resulted in the RMSE and MAE values being output instead of “NA”.\nFinally, we will test the function by using an incorrect data type, a data frame instead of a vector, for one of our funciton inputs. To do this, we will first generate a data frame using the response and predicted variables, and name it resp_df.\n\nresp_list &lt;- list(\"response\" = resp, \"predicted\" = pred)\n\nresp_df &lt;- as.tibble(resp_list)\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\nstr(resp_df)\n\ntibble [100 × 2] (S3: tbl_df/tbl/data.frame)\n $ response : num [1:100] 7.67 5.73 8.64 12.07 4.36 ...\n $ predicted: Named num [1:100] 8.15 6.05 7.31 10.09 3.74 ...\n  ..- attr(*, \"names\")= chr [1:100] \"1\" \"2\" \"3\" \"4\" ...\n\n\nThen we will attempt to process the data frame through getRMSE_MAE.\n\ngetRMSE_MAE(resp_df, pred)\n\n[1] \"The data is not atomic\"\nError in try({ : no loop for break/next, jumping to top level\n\n\nWe see that our screening criteria worked properly, generating an output message while displaying where the error in the function occurred. This error occurred due to the if statement testing !is.atomic() being TRUE, causing the break function to be executed.\n\n\n\n\n\n\nUse GET() from the httr package to return information about a topic that has been in the news lately. To do this, we will use the default value of “/v2/everything” in our URL to ensure we return the maximum number of articles.\n\nsite_raw_data &lt;- httr::GET(\"https://newsapi.org/v2/everything?q=Apple&from=2024-06-01&sortBy=popularity&apiKey=b5c4c79305fb46db9e6212948cdf50e0\")\n\nsite_raw_data\n\nResponse [https://newsapi.org/v2/everything?q=Apple&from=2024-06-01&sortBy=popularity&apiKey=b5c4c79305fb46db9e6212948cdf50e0]\n  Date: 2024-06-23 18:22\n  Status: 200\n  Content-Type: application/json; charset=utf-8\n  Size: 67.7 kB\n\n\nThe GET() function worked properly, so we are ready to move on to the next step.\n\n\n\nNext we are going to parse our variable site_raw_data into a data frame with the article information in it. When creating the data frame, we will ensure that the title, author, and description of the articles are first. We will also ensure the code omitsany articles that may have been removed by the host site and sorts the remaining results to ensure the most recent articles are listed first.\n\nparsed &lt;- jsonlite::fromJSON(rawToChar(site_raw_data$content))\n\n  articles &lt;- as.tibble(parsed$articles) |&gt;\n    select(title, author, description, everything()) |&gt;\n    filter(title != \"[Removed]\") |&gt;\n    arrange(desc(publishedAt))\n\narticles\n\n# A tibble: 76 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Typing to … Victo… \"In iOS 18… the-verge http… https://c… 2024-06-22… \"Typin…\n 2 Bugatti’s … Jason… \"Furiously… wired     http… https://m… 2024-06-20… \"The r…\n 3 EU delays … Kris … \"European … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-20… \"If yo…\n 4 Ex-OpenAI … Benj … \"Safe Supe… ars-tech… http… https://c… 2024-06-20… \"Enlar…\n 5 Xbox Game … Quent… \"CDKeys is… the-verge http… https://c… 2024-06-19… \"Xbox …\n 6 The Mornin… Mat S… \"Nintendo … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-19… \"If yo…\n 7 This unive… Quent… \"Cantata h… the-verge http… https://c… 2024-06-18… \"This …\n 8 Nvidia ove… Richa… \"Nvidia’s … the-verge http… https://c… 2024-06-18… \"Nvidi…\n 9 Beats Solo… Billy… \"The idea … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-18… \"If yo…\n10 Your Apple… Dua R… \"WWDC 2024… &lt;NA&gt;      http… https://i… 2024-06-18… \"WWDC …\n# ℹ 66 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;\n\n\nThe parsing and data frame generation was a success. We are now ready to combine these separate operations into a function to query articles.\n\n\n\nNow that we have successfully retrieved and parsed the data into a tibble separately, we will write a quick function that allows the user to easily query the API using inputs for the title/subject, a time period for the search, and an API key.\nWhen developing our function, we tested it using the inputs “Apple”, “2024-06-01”, and the API that “newsapi.org” provided.\n\ngetArticles &lt;- function(subject, date_start, APIkey) {\n  \n  subject &lt;- str_replace_all(subject,\" \", \"%20\")\n\n  sitestring &lt;-  httr::GET(str_c(\"https://newsapi.org/v2/everything?q=\", subject, \"&from=\", date_start, \"&sortBy=popularity&apiKey=\", APIkey)) \n\n  parsed &lt;- jsonlite::fromJSON(rawToChar(sitestring$content))\n\n  articles &lt;- as.tibble(parsed$articles) |&gt;\n    select(title, author, description, everything()) |&gt;\n    filter(title != \"[Removed]\") |&gt;\n    arrange(desc(publishedAt))\n\n  articles\n\n}\n\ngetArticles(\"Apple\", \"2024-06-01\", \"b5c4c79305fb46db9e6212948cdf50e0\")\n\n# A tibble: 76 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Typing to … Victo… \"In iOS 18… the-verge http… https://c… 2024-06-22… \"Typin…\n 2 Bugatti’s … Jason… \"Furiously… wired     http… https://m… 2024-06-20… \"The r…\n 3 EU delays … Kris … \"European … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-20… \"If yo…\n 4 Ex-OpenAI … Benj … \"Safe Supe… ars-tech… http… https://c… 2024-06-20… \"Enlar…\n 5 Xbox Game … Quent… \"CDKeys is… the-verge http… https://c… 2024-06-19… \"Xbox …\n 6 The Mornin… Mat S… \"Nintendo … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-19… \"If yo…\n 7 This unive… Quent… \"Cantata h… the-verge http… https://c… 2024-06-18… \"This …\n 8 Nvidia ove… Richa… \"Nvidia’s … the-verge http… https://c… 2024-06-18… \"Nvidi…\n 9 Beats Solo… Billy… \"The idea … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-18… \"If yo…\n10 Your Apple… Dua R… \"WWDC 2024… &lt;NA&gt;      http… https://i… 2024-06-18… \"WWDC …\n# ℹ 66 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;\n\n\nWe see that our inital code works, so let’s test it out two times using more complicated entries.\nSearching for “Caitlin Clark”\n\ngetArticles(\"Caitlin Clark\", \"2024-06-10\", \"b5c4c79305fb46db9e6212948cdf50e0\")\n\n# A tibble: 97 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Caitlin Cl…  &lt;NA&gt;  \"Caitlin C… fox-spor… http… https://a… 2024-06-22… \"The I…\n 2 Fever's Ca… \"Jose… \"Indiana F… bleacher… http… https://m… 2024-06-22… \"Jeff …\n 3 Insider To… \"Joi-… \"In Saturd… business… http… https://i… 2024-06-22… \"Getty…\n 4 Aces Top W… \"Jay … \"Record vi… &lt;NA&gt;      http… https://i… 2024-06-22… \"In th…\n 5 Caitlin Cl… \"Andr… \"The India… bleacher… http… https://m… 2024-06-22… \"Adam …\n 6 WNBA rooki… \"Emma… \"The \\\"Dou… &lt;NA&gt;      http… https://n… 2024-06-21… \"Chica…\n 7 Caitlin Cl… \"Paul… \"Indiana F… bleacher… http… https://m… 2024-06-21… \"Emile…\n 8 The Need F… \"Bria… \"Financial… &lt;NA&gt;      http… https://i… 2024-06-21… \"In Ju…\n 9 A'ja Wilso… \"DOUG… \"A’ja Wils… abc-news  http… https://i… 2024-06-21… \"NEW Y…\n10 Wilson, Cl… \"Mich… \"The Aces'… espn      http… https://a… 2024-06-21… \"The L…\n# ℹ 87 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;\n\n\nSearching for “us heat wave”\n\ngetArticles(\"us heat wave\", \"2024-06-01\", \"b5c4c79305fb46db9e6212948cdf50e0\")\n\n# A tibble: 98 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 \"How Much … Amand… \"During ex… &lt;NA&gt;      http… https://w… 2024-06-22… \"The h…\n 2 \"Insider T… Joi-M… \"In Saturd… business… http… https://i… 2024-06-22… \"Getty…\n 3 \"A Single … Kylie… \"Not all 1… &lt;NA&gt;      http… &lt;NA&gt;       2024-06-22… \"Summe…\n 4 \"How to St… Shawn… \"Heat impa… &lt;NA&gt;      http… https://c… 2024-06-21… \"Is it…\n 5 \"In Conver… info@… \"It's prob… &lt;NA&gt;      http… https://i… 2024-06-21… \"It’s …\n 6 \"‘It’s Hel… Kate … \"Illustrat… &lt;NA&gt;      http… https://i… 2024-06-21… \"As a …\n 7 \"5 Ways a … Jon R… \"These big… &lt;NA&gt;      http… https://w… 2024-06-21… \"A wee…\n 8 \"The myste… Caitl… \"The unpre… &lt;NA&gt;      http… https://s… 2024-06-21… \"This …\n 9 \"3 Fun Pla… Eater… \"A new lun… &lt;NA&gt;      http… https://c… 2024-06-21… \"The b…\n10 \"Kathy Hoc… Liza … \"“If you d… &lt;NA&gt;      http… https://i… 2024-06-21… \"Hochu…\n# ℹ 88 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;\n\n\nEach of these iterations are a success. However, there is a flaw in the code design that could not be resolved. I was not able to find any code online that would assist with taking various ways of inputting the date and converting it into the ymd() format required for URL use."
  },
  {
    "objectID": "Homework4.html#task-1-conceptual-questions",
    "href": "Homework4.html#task-1-conceptual-questions",
    "title": "Homework 4 - Hodge Podge",
    "section": "",
    "text": "What is the purpose of the lapply() function? What is the equivalent purrr function?\n\nThe purpose lapply() is to apply a function to all variables in a data frame. lapplytreats the variables in data frames as a list, and applies a called function to all objects in the list. The equivalent purrr function tolapply()ismap().\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply())\n\nlapply(my_list, cor(numeric_matrix, method = “kendall”))\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\nmap() is more consistent and has additional helper funcitons for use in analysis\n\nWhat is a side-effect function?\n\nA side-effect funciton is one where the state of the data is changed while returning a value. Some examples are print() and plot() where the function takes the data and creates the different outputs.\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\nThe sd() function is global throughout R (via R packages). When use inside of a function, sd is a temporary variable that is local to the funciton it is in. Once the functioncode is finished running, the variable sd does not exist."
  },
  {
    "objectID": "Homework4.html#task-2-writing-r-functions",
    "href": "Homework4.html#task-2-writing-r-functions",
    "title": "Homework 4 - Hodge Podge",
    "section": "",
    "text": "Before we write any code, we want to ensure we establish a library for the functions to operate from so the program renders to Quarto properly.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\nStep 1 of task 2 is to write a basic function called getRMSE() that takes in a vector of responses, a vector of predictions, and outputs the RMSE.\n\n# name the function \"getRMSE\", define \"x\" as our response\n# values and \"y\" as our predicted values. \n\ngetRMSE &lt;- function(x, y) {\n\n\n# generate the loop required to subtract each predicted \n# value from the corresponding response value.\n\n# subtract the predicted values from the observed values, square the difference, \n# sum the values, establish the mean of the sum, then take\n# the square root of the mean. \n\n# Note: The order of which variable is subtracted from which\n# doesn't matter due to squaring the difference for each\n# iteration of the loop. \n  \n  for (i in x) {  \n  diff_sq &lt;- ((x - y)**2)\n  } \n\n  \n# take the square root of the mean of the diff_sq, define\n# it as \"RMSE\"\n  \n  RMSE &lt;- sqrt(mean(diff_sq))\n\n    \n# output the result\n  list(\"RMSE\" = RMSE)\n}\n\n\n# quickly test the function using 10 through 100 by ten as\n# the response and the mean as the predicted value for each\n# response to ensure there are no error codes\n\nx_test &lt;- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)\ny_test &lt;- c(55, 55, 55, 55, 55, 55, 55, 55, 55, 55)\n\ngetRMSE(x_test, y_test)\n\n$RMSE\n[1] 28.72281\n\n\nThe generic run of our function did not produce an error code, so we’re ready to move on to step 2.\n\n\n\nStep 2 of task 2 is to generate response and predicted values for x, then process those values through our getRMSE function.\nFirst we will run the code provided in the homework assignment to create vectors of response values and predicted values. We will title these vectors resp and pred respectively.\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nlist(\"response\" = resp, \"predicted\" = pred)\n\n$response\n  [1]  7.674144  5.733128  8.637031 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399  7.587703  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925  7.666618\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494  9.180810  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177  3.387353\n\n$predicted\n        1         2         3         4         5         6         7         8 \n 8.148104  6.053163  7.307135 10.085585  3.739836  5.204247  5.716673  5.693445 \n        9        10        11        12        13        14        15        16 \n 9.279037  7.335984  9.652981  8.777073  4.035984  9.071286  6.588422  7.326985 \n       17        18        19        20        21        22        23        24 \n 3.392964  5.608614  7.013660 11.578506 11.876889  9.274059 10.941555  6.562523 \n       25        26        27        28        29        30        31        32 \n 7.087342 10.226961 11.600984  5.351967 10.896273  6.565957  8.441599  3.822838 \n       33        34        35        36        37        38        39        40 \n 4.623563 12.243368  7.262566 10.655945 11.437790 12.815573 10.005657  8.075302 \n       41        42        43        44        45        46        47        48 \n 5.726624  5.240438  3.001871 10.459905  5.459384  4.533592  3.029100  7.924969 \n       49        50        51        52        53        54        55        56 \n 3.925253 11.217497  6.549574 12.625387  5.417487  7.789709  4.850664  8.938692 \n       57        58        59        60        61        62        63        64 \n 7.647044  7.730136  7.024534  8.125218  3.184053  4.045989  7.745808  6.994831 \n       65        66        67        68        69        70        71        72 \n11.552256 10.795551  8.835719  7.522155  3.725912  5.138510  3.639992  8.429384 \n       73        74        75        76        77        78        79        80 \n 9.545482  8.338708  3.261221  8.548719  6.741992 12.884971  5.537261  5.021745 \n       81        82        83        84        85        86        87        88 \n11.842039  7.698384  5.177431  9.359619  4.976822  3.056559 11.180401  5.714464 \n       89        90        91        92        93        94        95        96 \n 4.590225  4.627202  7.950078 10.276667  9.029635  8.249127  6.834518 11.564354 \n       97        98        99       100 \n 5.450278  8.493829 10.615164  3.164468 \n\n\nNext we will test our function using the values we created for resp and pred.\n\ngetRMSE &lt;- function(x, y) {\n  for (i in x) {  \n    diff_sq &lt;- ((x - y)**2)\n  } \n\n  RMSE &lt;- sqrt(mean(diff_sq))\n\n    \n  # output the result\n  list(\"RMSE\" = RMSE)\n}\n\ngetRMSE(resp, pred)\n\n$RMSE\n[1] 0.9581677\n\n\nNow that we have successfully tested our function, we are going to replace two response values with missing values using (NA_real_). We will call this new response vector resp_NA.\n\nreplace_values &lt;- c(resp[1], resp[100])\n\nresp_NA &lt;- replace(resp, resp %in% replace_values, NA_real_)\n\nlist(\"response_NA\" = resp_NA)\n\n$response_NA\n  [1]        NA  5.733128  8.637031 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399  7.587703  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925  7.666618\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494  9.180810  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177        NA\n\n\nNext we will test our getRMSE function to determine how it responds with and without adding code to address the missing values in resp_NA.\nFirst we will test getRMSE without specifying behavior to deal with the missing values. .\n\ngetRMSE(resp_NA, pred)\n\n$RMSE\n[1] NA\n\n\nRunning resp_NA through getRMSE produces the result of “NA”. This is due to the two NA values in the response variable not being suitable for computations, even while being numeric values themselves.\nTo correct this, we will add code to getRMSE that will replace any NA values in an analyzed vector with the mean of the vector’s other values. We will call the updated function getRMSE_2.\n\n# update getRMSE to account for missing data in response variable, \n# call the updated function getRMSE_2\n\ngetRMSE_2 &lt;- function(x, y) {\n  x &lt;- replace(x, is.na(x), mean(x, na.rm = TRUE))\n  for (i in x) {  \n    diff_sq &lt;- ((x - y)**2)\n  } \n\n  RMSE &lt;- sqrt(mean(diff_sq))\n\n    \n  # output the result\n  list(\"RMSE\" = RMSE)\n}\n\ngetRMSE_2(resp_NA, pred)\n\n$RMSE\n[1] 1.053783\n\n\n\n\n\nSimilar to our getRMSE function, we will utilize a loop function to generate the iterative values of x[i] and y[i] in order to calculate the difference between them. Next we will take the absolute difference of these values, then determine their mean in order to determine the Mean Absolute Deviation (MAE).\n\ngetMAE &lt;- function(x, y) {\n  for(i in x) {\n    abs_diff &lt;- abs(x-y)\n  }\n  \n  MAE &lt;- mean(abs_diff)\n  \n  list(\"MAE\" = MAE)\n}\n\ngetMAE(x_test, y_test)\n\n$MAE\n[1] 25\n\n\nConducting a generic test using the x_test and y_test vectors shows that the function did not produce an error. We are ready to further test our function.\n\n\n\nNext, we will use the code provided to again generate vectors resp and pred. Seeing that this is the same code we used in Step 2, and that we did not alter either of the vectors in Step 2.2, we can safely pass these vectors through ourgetMAE function.\n\ngetMAE(resp, pred)\n\n$MAE\n[1] 0.8155776\n\n\nWe will now attempt to reproduce our MAE results using a response data set that has missing values. This is the same test we previous did for getRMSE, so we will use the response vector resp_NA to further test getMAE.\n\ngetMAE(resp_NA, pred)\n\n$MAE\n[1] NA\n\n\nLike with our initial test of passing missing values through getRMSE, getMAE provides the result of “NA” due to the NA values.\nWe will now modify the function code to account for NA values, then retest the function using resp_NA.\n\ngetMAE_2 &lt;- function(x, y) {\n  x &lt;- replace(x, is.na(x), mean(x, na.rm = TRUE))\n  for(i in x) {\n    abs_diff &lt;- abs(x-y)\n  }\n  \n  MAE &lt;- mean(abs_diff)\n  \n  list(\"MAE\" = MAE)\n\n}\n\ngetMAE_2(resp_NA, pred)\n\n$MAE\n[1] 0.8584455\n\n\n\n\n\nNow that we have established that our getRMSE and getMAE functions work properly, we will use them as helper functions inside of a wrapper function getRMSE_MAE that can be used to return either the RMSE, the MAE, or both results.\nWhen returning the values, we will give them appropriate names to ensure we know which result applies to which statistic. We will generate the function returning both statistics as the default value.\nAdditionally, we will encase the function code inside of a try() function. This is necessary for our function to test if the input values are atomic, numeric, and vectors then output a user generated error message and exit the function if these conditions aren’t met. Using try() allows the program to identify an issue with a single use of the function without preventing the remaining code chunks throughout the program from executing.\nFirst we will generate the function, then test it using our x_test and y_test generic data to ensure the function works without errors.\n\ngetRMSE_MAE &lt;- function(x, y, stat = \"both\") {\n  \n  try({\n  error_code &lt;- c(\"The data is not atomic\", \"The data is not numeric\", \n                  \"The data is not a vector\")\n  \n  if(!is.atomic(x) | !is.atomic(y)) {\n    print(error_code[1])\n    break\n    }\n  \n  if(!is.numeric(x) | !is.numeric(y)) {\n    print(error_code[2])\n    break\n    }\n  \n  if(!is.vector(x) | !is.vector(y)) {\n    print(error_code[3])\n    break\n    }\n  \n  RMSE &lt;- getRMSE_2(x,y)\n  MAE &lt;- getMAE_2(x,y)\n  \n  if(stat == \"both\") {\n    print(RMSE)\n    print(MAE)\n  } else if(stat == \"RMSE\") {\n      RMSE\n  } else if(stat == \"MAE\") {\n      MAE\n  } else {\n    \"Incorrect Statistic Selection\"\n  }\n \n})\n}\n\ngetRMSE_MAE(x_test, y_test)\n\n$RMSE\n[1] 28.72281\n\n$MAE\n[1] 25\n\n\nThe function appears to be operational, so we are read to move on to the next step.\n\n\n\nWe will again use the provided code to generate response (resp) and prediction (pred) variables for use in testing our wrapper function.\n\nset.seed(10) n &lt;- 100 x &lt;- runif(n) resp &lt;- 3 + 10*x + rnorm(n) pred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nBecause this is the same code we used earlier in this report, and we have not modified either of the vectors earlier throughout the report, we can safely process them through getRMSE_MAE.\nWe will use getRMSE_MAE once to output each statistic individually, then once to output both statistics together.\nFirst we will output the RMSE value by explicitly listing it in the function values.\n\ngetRMSE_MAE(resp, pred, \"RMSE\")\n\n$RMSE\n[1] 0.9581677\n\n\nNext we will output the MAE value by explicitly listing it in the function values.\n\ngetRMSE_MAE(resp, pred, \"MAE\")\n\n$MAE\n[1] 0.8155776\n\n\nNow we will output both RMSE and MAE together. Because we have set the default value for statistic as “both”, we will only input the response and predicted vectors.\n\ngetRMSE_MAE(resp, pred)\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.8155776\n\n\nWe will now repeat this process after replacing two of the response values with missing values using NA_real_.\nThis is the same process we used earlier in this report to generate our vector resp_NA. Because we have not modified resp_NA earlier throughout the report, we can safely process it through getRMSE_MAE.\nProcessing resp_NA’s values through getRMSE_MAE generates resulting outputs .\n\ngetRMSE_MAE(resp_NA, pred)\n\n$RMSE\n[1] 1.053783\n\n$MAE\n[1] 0.8584455\n\n\nWhich is not how the homework is written for this step. Our function works properly while the homework is written in a way that suggests that “NA” responses for both RMSE and MAE should have generated.\nWe did not receive the expected “NA” responses for both outputs because we used our improved functions getRMSE_2 and getMAE_2 when writing getRMSE_MAE. Both of these helper functions have code written in them to replace missing values with the mean of the other values in the vector. This resulted in the RMSE and MAE values being output instead of “NA”.\nFinally, we will test the function by using an incorrect data type, a data frame instead of a vector, for one of our funciton inputs. To do this, we will first generate a data frame using the response and predicted variables, and name it resp_df.\n\nresp_list &lt;- list(\"response\" = resp, \"predicted\" = pred)\n\nresp_df &lt;- as.tibble(resp_list)\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\nstr(resp_df)\n\ntibble [100 × 2] (S3: tbl_df/tbl/data.frame)\n $ response : num [1:100] 7.67 5.73 8.64 12.07 4.36 ...\n $ predicted: Named num [1:100] 8.15 6.05 7.31 10.09 3.74 ...\n  ..- attr(*, \"names\")= chr [1:100] \"1\" \"2\" \"3\" \"4\" ...\n\n\nThen we will attempt to process the data frame through getRMSE_MAE.\n\ngetRMSE_MAE(resp_df, pred)\n\n[1] \"The data is not atomic\"\nError in try({ : no loop for break/next, jumping to top level\n\n\nWe see that our screening criteria worked properly, generating an output message while displaying where the error in the function occurred. This error occurred due to the if statement testing !is.atomic() being TRUE, causing the break function to be executed."
  },
  {
    "objectID": "Homework4.html#task-3-querying-an-api-and-a-tidy-style-function",
    "href": "Homework4.html#task-3-querying-an-api-and-a-tidy-style-function",
    "title": "Homework 4 - Hodge Podge",
    "section": "",
    "text": "Use GET() from the httr package to return information about a topic that has been in the news lately. To do this, we will use the default value of “/v2/everything” in our URL to ensure we return the maximum number of articles.\n\nsite_raw_data &lt;- httr::GET(\"https://newsapi.org/v2/everything?q=Apple&from=2024-06-01&sortBy=popularity&apiKey=b5c4c79305fb46db9e6212948cdf50e0\")\n\nsite_raw_data\n\nResponse [https://newsapi.org/v2/everything?q=Apple&from=2024-06-01&sortBy=popularity&apiKey=b5c4c79305fb46db9e6212948cdf50e0]\n  Date: 2024-06-23 18:22\n  Status: 200\n  Content-Type: application/json; charset=utf-8\n  Size: 67.7 kB\n\n\nThe GET() function worked properly, so we are ready to move on to the next step.\n\n\n\nNext we are going to parse our variable site_raw_data into a data frame with the article information in it. When creating the data frame, we will ensure that the title, author, and description of the articles are first. We will also ensure the code omitsany articles that may have been removed by the host site and sorts the remaining results to ensure the most recent articles are listed first.\n\nparsed &lt;- jsonlite::fromJSON(rawToChar(site_raw_data$content))\n\n  articles &lt;- as.tibble(parsed$articles) |&gt;\n    select(title, author, description, everything()) |&gt;\n    filter(title != \"[Removed]\") |&gt;\n    arrange(desc(publishedAt))\n\narticles\n\n# A tibble: 76 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Typing to … Victo… \"In iOS 18… the-verge http… https://c… 2024-06-22… \"Typin…\n 2 Bugatti’s … Jason… \"Furiously… wired     http… https://m… 2024-06-20… \"The r…\n 3 EU delays … Kris … \"European … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-20… \"If yo…\n 4 Ex-OpenAI … Benj … \"Safe Supe… ars-tech… http… https://c… 2024-06-20… \"Enlar…\n 5 Xbox Game … Quent… \"CDKeys is… the-verge http… https://c… 2024-06-19… \"Xbox …\n 6 The Mornin… Mat S… \"Nintendo … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-19… \"If yo…\n 7 This unive… Quent… \"Cantata h… the-verge http… https://c… 2024-06-18… \"This …\n 8 Nvidia ove… Richa… \"Nvidia’s … the-verge http… https://c… 2024-06-18… \"Nvidi…\n 9 Beats Solo… Billy… \"The idea … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-18… \"If yo…\n10 Your Apple… Dua R… \"WWDC 2024… &lt;NA&gt;      http… https://i… 2024-06-18… \"WWDC …\n# ℹ 66 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;\n\n\nThe parsing and data frame generation was a success. We are now ready to combine these separate operations into a function to query articles.\n\n\n\nNow that we have successfully retrieved and parsed the data into a tibble separately, we will write a quick function that allows the user to easily query the API using inputs for the title/subject, a time period for the search, and an API key.\nWhen developing our function, we tested it using the inputs “Apple”, “2024-06-01”, and the API that “newsapi.org” provided.\n\ngetArticles &lt;- function(subject, date_start, APIkey) {\n  \n  subject &lt;- str_replace_all(subject,\" \", \"%20\")\n\n  sitestring &lt;-  httr::GET(str_c(\"https://newsapi.org/v2/everything?q=\", subject, \"&from=\", date_start, \"&sortBy=popularity&apiKey=\", APIkey)) \n\n  parsed &lt;- jsonlite::fromJSON(rawToChar(sitestring$content))\n\n  articles &lt;- as.tibble(parsed$articles) |&gt;\n    select(title, author, description, everything()) |&gt;\n    filter(title != \"[Removed]\") |&gt;\n    arrange(desc(publishedAt))\n\n  articles\n\n}\n\ngetArticles(\"Apple\", \"2024-06-01\", \"b5c4c79305fb46db9e6212948cdf50e0\")\n\n# A tibble: 76 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Typing to … Victo… \"In iOS 18… the-verge http… https://c… 2024-06-22… \"Typin…\n 2 Bugatti’s … Jason… \"Furiously… wired     http… https://m… 2024-06-20… \"The r…\n 3 EU delays … Kris … \"European … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-20… \"If yo…\n 4 Ex-OpenAI … Benj … \"Safe Supe… ars-tech… http… https://c… 2024-06-20… \"Enlar…\n 5 Xbox Game … Quent… \"CDKeys is… the-verge http… https://c… 2024-06-19… \"Xbox …\n 6 The Mornin… Mat S… \"Nintendo … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-19… \"If yo…\n 7 This unive… Quent… \"Cantata h… the-verge http… https://c… 2024-06-18… \"This …\n 8 Nvidia ove… Richa… \"Nvidia’s … the-verge http… https://c… 2024-06-18… \"Nvidi…\n 9 Beats Solo… Billy… \"The idea … &lt;NA&gt;      http… &lt;NA&gt;       2024-06-18… \"If yo…\n10 Your Apple… Dua R… \"WWDC 2024… &lt;NA&gt;      http… https://i… 2024-06-18… \"WWDC …\n# ℹ 66 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;\n\n\nWe see that our inital code works, so let’s test it out two times using more complicated entries.\nSearching for “Caitlin Clark”\n\ngetArticles(\"Caitlin Clark\", \"2024-06-10\", \"b5c4c79305fb46db9e6212948cdf50e0\")\n\n# A tibble: 97 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 Caitlin Cl…  &lt;NA&gt;  \"Caitlin C… fox-spor… http… https://a… 2024-06-22… \"The I…\n 2 Fever's Ca… \"Jose… \"Indiana F… bleacher… http… https://m… 2024-06-22… \"Jeff …\n 3 Insider To… \"Joi-… \"In Saturd… business… http… https://i… 2024-06-22… \"Getty…\n 4 Aces Top W… \"Jay … \"Record vi… &lt;NA&gt;      http… https://i… 2024-06-22… \"In th…\n 5 Caitlin Cl… \"Andr… \"The India… bleacher… http… https://m… 2024-06-22… \"Adam …\n 6 WNBA rooki… \"Emma… \"The \\\"Dou… &lt;NA&gt;      http… https://n… 2024-06-21… \"Chica…\n 7 Caitlin Cl… \"Paul… \"Indiana F… bleacher… http… https://m… 2024-06-21… \"Emile…\n 8 The Need F… \"Bria… \"Financial… &lt;NA&gt;      http… https://i… 2024-06-21… \"In Ju…\n 9 A'ja Wilso… \"DOUG… \"A’ja Wils… abc-news  http… https://i… 2024-06-21… \"NEW Y…\n10 Wilson, Cl… \"Mich… \"The Aces'… espn      http… https://a… 2024-06-21… \"The L…\n# ℹ 87 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;\n\n\nSearching for “us heat wave”\n\ngetArticles(\"us heat wave\", \"2024-06-01\", \"b5c4c79305fb46db9e6212948cdf50e0\")\n\n# A tibble: 98 × 8\n   title       author description source$id url   urlToImage publishedAt content\n   &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 \"How Much … Amand… \"During ex… &lt;NA&gt;      http… https://w… 2024-06-22… \"The h…\n 2 \"Insider T… Joi-M… \"In Saturd… business… http… https://i… 2024-06-22… \"Getty…\n 3 \"A Single … Kylie… \"Not all 1… &lt;NA&gt;      http… &lt;NA&gt;       2024-06-22… \"Summe…\n 4 \"How to St… Shawn… \"Heat impa… &lt;NA&gt;      http… https://c… 2024-06-21… \"Is it…\n 5 \"In Conver… info@… \"It's prob… &lt;NA&gt;      http… https://i… 2024-06-21… \"It’s …\n 6 \"‘It’s Hel… Kate … \"Illustrat… &lt;NA&gt;      http… https://i… 2024-06-21… \"As a …\n 7 \"5 Ways a … Jon R… \"These big… &lt;NA&gt;      http… https://w… 2024-06-21… \"A wee…\n 8 \"The myste… Caitl… \"The unpre… &lt;NA&gt;      http… https://s… 2024-06-21… \"This …\n 9 \"3 Fun Pla… Eater… \"A new lun… &lt;NA&gt;      http… https://c… 2024-06-21… \"The b…\n10 \"Kathy Hoc… Liza … \"“If you d… &lt;NA&gt;      http… https://i… 2024-06-21… \"Hochu…\n# ℹ 88 more rows\n# ℹ 1 more variable: source$name &lt;chr&gt;\n\n\nEach of these iterations are a success. However, there is a flaw in the code design that could not be resolved. I was not able to find any code online that would assist with taking various ways of inputting the date and converting it into the ymd() format required for URL use."
  }
]